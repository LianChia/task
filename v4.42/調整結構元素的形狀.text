import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
from natsort import natsorted

def process_image(image, kernel_shape='rect', kernel_size=10, iterations=1):
    """
    對單張圖片進行閉運算處理，填補孔洞，並可以選擇結構元素的形狀。
    :param image: 原始灰階圖片
    :param kernel_shape: 結構元素的形狀 ('rect', 'ellipse', 'circle')
    :param kernel_size: 閉運算的內核大小，數值越大，閉運算效果越強
    :param iterations: 閉運算的迭代次數
    :return: 經過處理後的圖片
    """
    
    # 定義結構元素的形狀
    if kernel_shape == 'rect':
        kernel = np.ones((kernel_size, kernel_size), np.uint8)  # 矩形內核
    elif kernel_shape == 'ellipse':
        kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (kernel_size, kernel_size))  # 橢圓內核
    elif kernel_shape == 'circle':
        kernel = cv2.getStructuringElement(cv2.MORPH_CROSS, (kernel_size, kernel_size))  # 圓形內核
    
    # 進行閉運算
    closing = cv2.morphologyEx(image, cv2.MORPH_CLOSE, kernel, iterations=iterations)
    
    return closing

# 資料夾路徑
input_folder = r"C:\Users\SSTek\Desktop\LianChia\task\v4.42\300_predict"
output_folder = r"C:\Users\SSTek\Desktop\LianChia\task\v4.42\300_predict_2"

# 確認輸出資料夾存在，不存在則創建
if not os.path.exists(output_folder):
    os.makedirs(output_folder)

# 自然排序讀取資料夾中的 PNG 檔案
image_files = natsorted([f for f in os.listdir(input_folder) if f.endswith('.png')])

# 調整參數
kernel_shape = 'ellipse'  # 結構元素形狀 (可調整為 'rect', 'ellipse', 或 'circle')
kernel_size = 15           # 內核大小 (可調整)
iterations = 4             # 迭代次數 (可調整)

# 遍歷資料夾中的每個圖片
for image_file in image_files:
    # 建立完整的輸入和輸出檔案路徑
    input_path = os.path.join(input_folder, image_file)
    output_path = os.path.join(output_folder, image_file)

    # 讀取圖片
    image = cv2.imread(input_path, cv2.IMREAD_GRAYSCALE)

    # 檢查是否成功讀取圖片
    if image is None:
        print(f"無法讀取圖片: {image_file}")
        continue

    # 使用參數進行處理
    processed_image = process_image(image, kernel_shape=kernel_shape, kernel_size=kernel_size, iterations=iterations)

    # 保存處理後的圖片
    cv2.imwrite(output_path, processed_image)

    # 可以選擇顯示處理結果 (若不需要可以注釋掉這段)
    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    plt.title('原始圖片')
    plt.imshow(image, cmap='gray')

    plt.subplot(1, 2, 2)
    plt.title('填補孔洞後')
    plt.imshow(processed_image, cmap='gray')

    plt.show()

    print(f"處理完成並保存至: {output_path}")

print("所有圖片處理完成。")



AIOU： 0.8341596740407727